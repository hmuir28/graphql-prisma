type Query {
  comments(query: String, first: Int, skip: Int, orderBy: CommentOrderByInput): [Comment!]!
  users(query: String, first: Int, skip: Int, orderBy: UserOrderByInput): [User!]!
  myPosts(query: String, first: Int, skip: Int, orderBy: PostOrderByInput): [Post!]!
  posts(query: String, first: Int, skip: Int, orderBy: PostOrderByInput): [Post!]!
  me: User!
  post(id: ID!): Post!
}

type Mutation {
  login(data: userCredentials): AuthPayload!
  createComment(data: createComment): Comment!
  createUser(data: createUser): AuthPayload!
  createPost(data: createPost): Post!
  updateUser(data: updateUser): User!
  updatePost(id: ID!, data: updatePost): Post!
  updateComment(id: ID, data: updateComment): Comment!
  deleteComment(id: ID!): Comment!
  deleteUser: User!
  deletePost(id: ID!): Post!
}

type AuthPayload {
  user: User!
  token: String!
}

type Subscription {
  comment(postId: String!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload
  myPosts: PostSubscriptionPayload!
}

input userCredentials {
  email: String!
  password: String!
}

input createUser {
  name: String!
  email: String!
  age: Int!
  password: String!
}

input createPost {
  title: String!
  body: String!
  published: Boolean!
}

input createComment {
  text: String!
  post: String!
}

input updateUser {
  name: String
  email: String
  age: Int
}

input updatePost {
  title: String
  body: String
  published: Boolean
}

input updateComment {
  text: String
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  createdAt: String!
  updatedAt: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  age: Int!
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}


enum UserOrderByInput {
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum CommentOrderByInput {
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum PostOrderByInput {
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}
